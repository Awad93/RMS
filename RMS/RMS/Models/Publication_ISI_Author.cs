//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
    using App_Code;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    public partial class clsPublication_ISI_Author
    {
        #region Fields
        public static string Publication_ISI_Author_ID = " Publication_ISI_Author_ID ";
        public static string KFUPMID = " KFUPMID ";
        public static string WOS_Number = "WOS_Number";
        public static string Number_Of_Authors = "Number_Of_Authors";
        public static string Authorship_Order = "Authorship_Order";
        public static string Publication_Points = "Publication_Points";
        public static string Project_Code = "Project_Code";
        public static string isCorresponding_Author = "isCorresponding_Author";
        public static string Verified = "Verified=";
        public static string CreatedOn = "CreatedOn";
        public static string CreatedBy = "CreatedBy";
        public static string UpdatedOn = "UpdatedOn";
        public static string UpdatedBy = "UpdatedBy";
        public static string Active_flag = "Active_flag";
        public static string Deleted_flag = "Deleted_flag";
        #endregion
    }

    public partial class Publication_ISI_AuthorController
    {
        #region Fields
        public int Publication_ISI_Author_ID { get; set; }
        public double? KFUPMID { get; set; }
        public string WOS_Number { get; set; }
        public int? Number_Of_Authors { get; set; }
        public double? Authorship_Order { get; set; }
        public double? Publication_Points { get; set; }
        public string Project_Code { get; set; }
        public bool? isCorresponding_Author { get; set; }
        public bool Verified { get; set; }
        public DateTime CreatedOn { get; set; }
        public string CreatedBy { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public string UpdatedBy { get; set; }
        public bool? Active_flag { get; set; }
        public bool? Deleted_flag { get; set; }
        #endregion

        #region Methods

        #region Publication Points
        /// <summary>
        /// Retreives yearly publication points for all colleges
        /// </summary>
        /// <returns>Table - Col1: Year, Col2: Publication Points</returns>
        public static DataTable GetStatsForPublicationPoints()
        {
            string strStoredProcedureName = "sp_rep_GetStatsForPublicationPoints";

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure);

            return dt;
        }


        /// <summary>
        /// Retreives yearly publication points for a college
        /// </summary>
        /// <param name="college_code">College department code</param>
        /// <returns>Table - Col1: Year, Col2: Publication Points</returns>
        public static DataTable GetStatsForPublicationPointsByCollege(string college_code)
        {
            string strStoredProcedureName = "sp_rep_GetStatsForPublicationPointsByCollege";

            SqlParameter param = (new SqlParameter("@college_code", college_code));

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return dt;
        }


        /// <summary>
        /// Retreives yearly publication points for a department
        /// </summary>
        /// <param name="dept_code">Department code</param>
        /// <returns>Table - Col1: Year, Col2: Publication Points</returns>
        public static DataTable GetStatsForPublicationPointsByDepartment(string dept_code)
        {
            string strStoredProcedureName = "sp_rep_GetStatsForPublicationPointsByDepartment";

            SqlParameter param = (new SqlParameter("@dept_code", dept_code));

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return dt;
        }


        /// <summary>
        /// Retreives yearly publication points for a faculty
        /// </summary>
        /// <param name="id">KFUPM ID of faculty</param>
        /// <returns>Table - Col1: Year, Col2: Publication Points</returns>
        public static DataTable GetStatsForPublicationPointsByFaculty(int id)
        {
            string strStoredProcedureName = "sp_rep_GetStatsForPublicationPointsByFaculty";

            SqlParameter param = (new SqlParameter("@id", id));

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return dt;
        }
        #endregion

        #region List incomplete ISI publication author entries

        /// <summary>
        /// Retrieves all ISI Publication Author entries with a given KFUPM ID and null fields
        /// </summary>
        /// <param name="id">Researcher's KFUPM ID</param>
        /// <returns></returns>
        public static DataTable GetISIPublicationAuthorsUnverifiedForSingleFaculty(int id)
        {
            string strStoredProcedure = "sp_prof_GetISIPublicationAuthorsUnverifiedForSingleFaculty";

            SqlParameter param = new SqlParameter("@kfupmid", id);

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedure, CommandType.StoredProcedure, param);

            return dt;
        }

        #endregion

        #region Add/Update Entry

        public static void addISIPublicationAuthor(int id, string WOSNumber, int numberOfAuthors)
        {
            string strStoredProcedureName = "sp_prof_AddISIPublicationAuthor";
            List<SqlParameter> param = new List<SqlParameter>();

            param.Add(new SqlParameter("@id", id));
            param.Add(new SqlParameter("@WOSNumber", WOSNumber));
            param.Add(new SqlParameter("@numberOfAuthors", numberOfAuthors));

            DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);
        }

        /// <summary>
        /// Updates an ISI Publication Author record given its ID
        /// </summary>
        /// <param name="id">ISI Publication Author ID</param>
        /// <param name="is_corresponding_author">Boolean representing whether the author is the corresponding author</param>
        /// <param name="authorship_order">Author rank</param>
        /// <param name="project_code">Project code, if available</param>
        public static void UpdateISIPublicationAuthor(int id, bool is_corresponding_author, int authorship_order = -1, string project_code = null)
        {
            string strStoredProcedure = "sp_prof_UpdateISIPublicationAuthor";

            #region Add parameters
            List<SqlParameter> param = new List<SqlParameter>();
            param.Add(new SqlParameter("@id", id));
            param.Add(new SqlParameter("@is_corresponding_author", is_corresponding_author));
            if(authorship_order != -1)
                param.Add(new SqlParameter("@authorship_order", authorship_order));
            if(project_code != "" && project_code != null)
                param.Add(new SqlParameter("@project_code", project_code));
            #endregion

            DbAccess.ExecuteQuery(strStoredProcedure, CommandType.StoredProcedure, param);

        }

        #endregion

        #region Convert DataTable to List<Object>
        /// <summary>
        /// Returns a list of objects given a datatable
        /// </summary>
        /// <param name="dt">DataTable with same columns as attributes of class object</param>
        /// <returns></returns>
        private static List<Publication_ISI_AuthorController> ConvertDataTableToObject(DataTable dt)
        {
            var list = dt.AsEnumerable()
                .Select(dr =>
                new Publication_ISI_AuthorController
                {
                    Publication_ISI_Author_ID = Convert.ToInt32(dr.Field<int>(clsPublication_ISI_Author.Publication_ISI_Author_ID)),
                    KFUPMID = dr.Field<double?>(clsPublication_ISI_Author.KFUPMID),
                    WOS_Number = dr.Field<string>(clsPublication_ISI_Author.WOS_Number),
                    Number_Of_Authors = dr.Field<int?>(clsPublication_ISI_Author.Number_Of_Authors),
                    Authorship_Order = dr.Field<double?>(clsPublication_ISI_Author.Authorship_Order),
                    Publication_Points = dr.Field<double?>(clsPublication_ISI_Author.Publication_Points),
                    Project_Code = dr.Field<string>(clsPublication_ISI_Author.Project_Code),
                    isCorresponding_Author = dr.Field<bool?>(clsPublication_ISI_Author.isCorresponding_Author),
                    Verified = dr.Field<bool>(clsPublication_ISI_Author.Verified),

                    Deleted_flag = dr.Field<bool?>("Deleted_flag"),
                    Active_flag = dr.Field<bool?>("Active_flag"),
                    CreatedBy = dr.Field<string>("CreatedBy"),
                    CreatedOn = dr.Field<System.DateTime>("CreatedOn")
                }
                ).ToList();

            return list;
        }

        #endregion

#endregion
    }
}
