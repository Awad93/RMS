//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
    using App_Code;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;

    public partial class clsPublication_NonISI
    {
        #region Fields
        public static string Publication_NonISI_ID = "Publication_NonISI_ID";
        public static string KFUPMID = "KFUPMID";
        public static string DOI = "DOI";
        public static string Authors = "Authors";
        public static string Paper_Title = "Paper_Title";
        public static string Source = "Source";
        public static string Publication_Year = "Publication_Year";
        public static string Approved = "Approved";
        public static string isCorresponding_Author = "isCorresponding_Author";
        public static string CreatedOn = "CreatedOn";
        public static string CreatedBy = "CreatedBy";
        public static string UpdatedOn = "UpdatedOn";
        public static string UpdatedBy = "UpdatedBy";
        public static string Active_flag = "Active_flag";
        public static string Deleted_flag = "Deleted_flag";
        #endregion
    }

    public partial class Publication_NonISIController
    {
        #region Fields
        public int Publication_NonISI_ID { get; set; }
        public double KFUPMID { get; set; }
        public string DOI { get; set; }
        public string Authors { get; set; }
        public string Paper_Title { get; set; }
        public string Source { get; set; }
        public int? Publication_Year { get; set; }
        public bool? Approved { get; set; }
        public bool? isCorrespondingAuthor { get; set; }
        public DateTime? CreatedOn { get; set; }
        public string CreatedBy { get; set; }
        public DateTime? UpdatedOn { get; set; }
        public string UpdatedBy { get; set; }
        public bool? Active_flag { get; set; }
        public bool? Deleted_flag { get; set; }
        #endregion

        #region Methods

        #region List

        /// <summary>
        /// Returns a list of all KFUPM Non-ISI Publications
        /// </summary>
        /// <returns>List of Non-ISI Publications ordered by year</returns>
        public static List<Publication_NonISIController> getNonISIPublicationsAll(string strApproved = null)
        {
            string strStoredProcedureName = "sp_rep_getNonISIPublicationsAll";

            SqlParameter param = (new SqlParameter("@Approved", strApproved));

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return ConvertDataTableToObject(dt);
        }


        /// <summary>
        /// Returns a list of Non-ISI Publications for a faculty
        /// </summary>
        /// <param name="id">KFUPM ID of faculty</param>
        /// <returns>List of Non-ISI Publications ordered by year</returns>
        public static List<Publication_NonISIController> getNonISIPublicationsByFaculty(int id)
        {
            string strStoredProcedureName = "sp_rep_getNonISIPublicationsByFaculty";

            #region Add parameters

            SqlParameter param = new SqlParameter();
            param.ParameterName = "@id";
            param.SqlDbType = SqlDbType.Int;
            param.Value = id;

            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return ConvertDataTableToObject(dt);

        }


        /// <summary>
        /// Returns a list of Non-ISI Publications for a college
        /// </summary>
        /// <param name="college_code">College department code</param>
        /// <returns>List of Non-ISI Publications ordered by year</returns>
        public static List<Publication_NonISIController> getNonISIPublicationsByCollege(string college_code = null, string strApproved = null,
            string strFromYear = null, string strToYear = null)
        {
            string strStoredProcedureName = "sp_rep_getNonISIPublicationsByCollege";

            #region Add parameters
            List<SqlParameter> parameters = new List<SqlParameter>();

            if (college_code != null)
                parameters.Add(new SqlParameter("@college_code", college_code));
            if (strApproved != null)
                parameters.Add(new SqlParameter("@Approved", strApproved));
            if (strFromYear != null)
                parameters.Add(new SqlParameter("@fromyear", strFromYear));
            if (strToYear != null)
                parameters.Add(new SqlParameter("@toyear", strToYear));
            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, parameters);

            return ConvertDataTableToObject(dt);
        }


        /// <summary>
        /// Returns a list of Non-ISI Publications for a department
        /// </summary>
        /// <param name="dept_code">Department code</param>
        /// <returns>List of Non-ISI Publications ordered by year</returns>
        public static List<Publication_NonISIController> getNonISIPublicationsByDepartment(string dept_code, string strApproved = null,
            string strFromYear = null, string strToYear = null)
        {
            string strStoredProcedureName = "sp_rep_getNonISIPublicationsByDepartment";

            #region Add parameters
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("@dept_code", dept_code));

            if (strApproved != null)
                parameters.Add(new SqlParameter("@Approved", strApproved));
            if (strFromYear != null)
                parameters.Add(new SqlParameter("@fromyear", strFromYear));
            if (strToYear != null)
                parameters.Add(new SqlParameter("@toyear", strToYear));

            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, parameters);

            return ConvertDataTableToObject(dt);
        }

        #endregion

        #region Stats

        public static DataTable GetPubStatsForNonISIPublicationsAllCollegesAllYears(string strJournalApproved, string strFromYear = null, string strToYear = null)
        {
            string strStoredProcedureName = "sp_rep_GetPubStatsForNonISIPublicationsAllCollegesAllYears";

            #region Add parameters

            List<SqlParameter> parameters = new List<SqlParameter>();

            parameters.Add(new SqlParameter("@journalApproved", strJournalApproved));

            if (strFromYear != null)
                parameters.Add(new SqlParameter("@fromYear", strFromYear));

            if (strToYear != null)
                parameters.Add(new SqlParameter("@toYear", strToYear));

            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, parameters);

            return dt;
        }

        public static DataTable GetPubStatsForNonISIPublicationsForSingleCollege(string strCollegeCode, string strDocType, string strFromYear = null, string strToYear = null)
        {
            string strStoredProcedureName = "sp_rep_GetPubStatsForNonISIPublicationsForSingleCollege";

            #region Add parameters

            List<SqlParameter> parameters = new List<SqlParameter>();

            parameters.Add(new SqlParameter("@college_code", strCollegeCode));
            parameters.Add(new SqlParameter("@doctype", strDocType));

            if (strFromYear != null)
                parameters.Add(new SqlParameter("@fromYear", strFromYear));

            if (strToYear != null)
                parameters.Add(new SqlParameter("@toYear", strToYear));

            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, parameters);

            return dt;
        }

        public static DataTable GetPubStatsForNonISIPublicationsForSingleDepartment(string strDepartmentCode, string strDocType, string strFromYear = null, string strToYear = null)
        {
            string strStoredProcedureName = "sp_rep_GetPubStatsForNonISIPublicationsForSingleDepartment";

            #region Add parameters

            List<SqlParameter> parameters = new List<SqlParameter>();

            parameters.Add(new SqlParameter("@dept_code", strDepartmentCode));
            parameters.Add(new SqlParameter("@doctype", strDocType));

            if (strFromYear != null)
                parameters.Add(new SqlParameter("@fromYear", strFromYear));

            if (strToYear != null)
                parameters.Add(new SqlParameter("@toYear", strToYear));

            #endregion

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, parameters);

            return dt;
        }

        public static DataTable GetPubStatsForNonISIPublicationsByFaculty(int id)
        {
            string strStoredProcedureName = "sp_rep_GetPubStatsForNonISIPublicationsByFaculty";

            SqlParameter param = new SqlParameter("@id", id);
            
            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return dt;
        }
        #endregion

        #region Search

        /// <summary>
        /// Retrieves a list of Non-ISI Publication objects where the authors field contains the last name of the faculty but faculty's KFUPM ID is missing from the corresponding authors table
        /// </summary>
        /// <param name="last_name">Last name of researcher</param>
        /// <param name="id">Researcher's KFUPM ID</param>
        /// <returns>List of Non-ISI Publication objects</returns>
        public static List<Publication_NonISIController> searchNonISIPublicationsByNameAndMissingID(string last_name, int id)
        {
            string strStoredProcedureName = "sp_rep_SearchNonISIPublicationsByAuthorsAndMissingKFUPMID";

            List<SqlParameter> param = new List<SqlParameter>();
            param.Add(new SqlParameter("@last_name", last_name));
            param.Add(new SqlParameter("@id", id));

            DataTable dt = DbAccess.ExecuteQuery(strStoredProcedureName, CommandType.StoredProcedure, param);

            return ConvertDataTableToObject(dt);
        }

        #endregion

        #region Add

        /// <summary>
        /// Adds a new Non-ISI Publication entry and a corresponding Author entry to the database
        /// </summary>
        /// <param name="kfupmid">Researcher's KFUPM ID</param>
        /// <param name="title">Paper title</param>
        /// <param name="journal">Journal paper was published in</param>
        /// <param name="authors">Authors of the paper</param>
        /// <param name="publication_year">Year of publication</param>
        /// <param name="url">URL</param>
        public static void AddNonISIPublication(int kfupmid, string title, string journal, string authors, int publication_year,
            string url)
        {
            string strStoredProcedure = "sp_rep_AddNonISIPublicationAsUnapproved";
            
            #region Add parameters

            List<SqlParameter> param = new List<SqlParameter>();
            param.Add(new SqlParameter("@kfupmid", kfupmid));
            param.Add(new SqlParameter("@title", title));
            param.Add(new SqlParameter("@journal", journal));
            param.Add(new SqlParameter("@authors", authors));
            param.Add(new SqlParameter("@year", publication_year));
            param.Add(new SqlParameter("@doi", url));

            #endregion

            DbAccess.ExecuteQuery(strStoredProcedure, CommandType.StoredProcedure);

        }            

        #endregion

        #region Convert DataTable to Object
        private static List<Publication_NonISIController> ConvertDataTableToObject(DataTable dt)
        {
            var list = dt.AsEnumerable()
                .Select(dr =>
                new Publication_NonISIController
                {
                    Publication_NonISI_ID = dr.Field<int>("Publication_NonISI_ID"),
                    DOI = dr.Field<string>("DOI"),
                    KFUPMID = dr.Field<double>("KFUPMID"),
                    Authors = dr.Field<string>("Authors"),
                    Paper_Title = dr.Field<string>("Paper_Title"),
                    Source = dr.Field<string>("Source"),
                    Publication_Year = dr.Field<int?>("Publication_Year"),
                    Approved = dr.Field<bool?>("Approved"),
                    isCorrespondingAuthor = dr.Field<bool?>("isCorrespondingAuthor"),
                    //Deleted_flag = dr.Field<bool?>("Deleted_flag"),
                    //Active_flag = dr.Field<bool?>("Active_flag"),
                    //CreatedBy = dr.Field<string>("CreatedBy"),
                    //CreatedOn = dr.Field<System.DateTime>("CreatedOn")
                }
                ).ToList();

            return list;
        }

        #endregion

        #endregion
    }
}
